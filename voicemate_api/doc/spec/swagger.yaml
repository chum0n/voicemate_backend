---
swagger: "2.0"
info:
  description: "RESTful API for voicemate"
  version: "2021-09-24T14:52:39Z"
  title: "voicemate-api"
host: "localhost:8000"
schemes:
- "https"
paths:
  /:
    get:
      tags:
      - "test"
      responses:
        200:
          description: "Response on success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Hello voicemate."
  /users/{id}:
    get:
      tags:
      - "users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/usersResponse"
    put:
      tags:
      - "users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/usersRequest" 
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/usersResponse"
    delete:
      tags:
      - "users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      responses:
        200:
          description: "Response on success"
  /users:
    get:
      consumes:
        - application/x-www-form-urlencoded
      tags:
      - "users"
      parameters:
      - name: "email"
        in: formData
        required: true
        type: "string"
      - name: "password"
        in: formData
        required: true
        type: "string"
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/usersResponse"
    post:
      consumes:
        - application/x-www-form-urlencoded
      tags:
      - "users"
      parameters:
      - name: "name"
        in: formData
        required: true
        type: "string"
      - name: "email"
        in: formData
        required: true
        type: "string"
      - name: "password"
        in: formData
        required: true
        type: "string"
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/usersResponse"
  /rooms/{id}:
    get:
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/roomsResponse"
    put:
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/roomsRequest" 
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/roomsResponse"
    delete:
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      responses:
        200:
          description: "Response on success"
  /rooms:
    get:
      tags:
      - "rooms"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "age_lower"
        in: "query"
        required: false
        type: "string"
      - name: "age_upper"
        in: "query"
        required: false
        type: "string"
      - name: "gender"
        in: "query"
        required: false
        type: "string"
      - name: "member_limit"
        in: "query"
        required: false
        type: "string"
      - name: "tag_ids"
        in: "query"
        required: false
        type: "string"
        description: "Example: 1,2,3,4"
      responses:
        200:
          description: "Response on success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/roomsResponse"
    post:
      tags:
      - "rooms"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/roomsRequest" 
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/roomsResponse"
  /tags/{id}:
    get:
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/tagsResponse"
    delete:
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      responses:
        200:
          description: "Response on success"
  /tags:
    get:
        tags:
        - "tags"
        parameters:
        - name: "name"
          in: "query"
          required: false
          type: "string"
        responses:
          200:
            description: "Response on success"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/tagsResponse"
    post:
      consumes:
        - application/x-www-form-urlencoded
      tags:
      - "tags"
      parameters:
      - name: "name"
        in: formData
        required: true
        type: "string"
      responses:
        200:
          description: "Response on success"
          schema:
            $ref: "#/definitions/tagsResponse"
definitions:
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "野球"
  usersResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
      name:
        type: "string"
        example: "test"
      age:
        type: "integer"
        format: "uint32"
        example: 20
      gender:
        type: "string"
        example: "male"
      email:
        type: "string"
        example: "test@example.com"
      password:
        type: "string"
        example: "test"
      room:
        type: "integer"
        format: "uint64"
        example: 1
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
  roomsResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
      name:
        type: "string"
        example: "test"
      ageLower:
        type: "integer"
        format: "uint32"
        example: 20
      ageUpper:
        type: "integer"
        format: "uint32"
        example: 50
      gender:
        type: "string"
        example: "male"
      memberLimit:
        type: "integer"
        format: "uint32"
        example: 5
      introduction:
        type: "string"
        example: "test"
      member:
        type: "integer"
        format: "uint32"
        example: 4
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
  tagsResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
      name:
        type: "string"
        example: "野球"
  usersRequest:
    type: "object"
    properties:
      name:
        type: "string"
        example: "test"
      email:
        type: "string"
        example: "test@example.com"
      password:
        type: "string"
        example: "test"
      tagIDs:
        type: "array"
        items:
          type: "integer"
        example:
          - 1
          - 2
  roomsRequest:
    type: "object"
    properties:
      name:
        type: "string"
        example: "test"
      ageLower:
        type: "integer"
        format: "uint32"
        example: 20
      ageUpper:
        type: "integer"
        format: "uint32"
        example: 50
      gender:
        type: "string"
        example: "male"
      memberLimit:
        type: "integer"
        format: "uint32"
        example: 5
      introduction:
        type: "string"
        example: "test"
      member:
        type: "integer"
        format: "uint32"
        example: 4
      tagIDs:
        type: "array"
        items:
          type: "integer"
        example:
          - 1
          - 2
